buildscript {
  ext {
    springBootVersion = '1.5.7.RELEASE'
  }
  repositories {
    jcenter()
    mavenCentral()
    maven { url 'http://repo.spring.io/plugins-release' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  }
  dependencies {
    classpath('io.spring.gradle:propdeps-plugin:0.0.9.RELEASE')
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath('io.swagger:swagger-codegen:2.3.0-SNAPSHOT')
    // see: https://github.com/thebignet/swagger-codegen-gradle-plugin-example
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: "jacoco"
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  jcenter()
  mavenCentral()
}


import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator


// see: https://github.com/thebignet/swagger-codegen-gradle-plugin-example/blob/master/build.gradle
// generate frontend code
def swaggerInput = new File('../frontend/src/generated/api.json')
if (!swaggerInput.exists()) {
  new URL('http://localhost:8080/v2/api-docs').withInputStream{ i -> swaggerInput.withOutputStream{ it << i }}
}
// def swaggerInput = file(new URL('http://localhost:8080/v2/api-docs').toURI())
def swaggerOutputDir = file('../frontend/src/generated')
task generateApi {
  inputs.files(swaggerInput)
  outputs.dir(swaggerOutputDir)
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/../frontend/src/generated/api.json")
    config.setOutputDir("$projectDir/../frontend/src/generated")
    config.setLang('typescript-angular')
    config.setVerbose(true)
    config.setAdditionalProperties([
            'basePath' : 'http://localhost:8080'
    ])
    // config.setImportMappings([
    //        'Dog': 'io.swagger.petstore.client.model.Dog'
    // ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

clean.doFirst {
  delete(swaggerOutputDir)
}

configurations {
  swagger
}

dependencies {
  compile('org.springframework.boot:spring-boot-starter-web')
  compile('org.springframework.boot:spring-boot-starter-data-jpa')
  compile('org.springframework.boot:spring-boot-starter-security')
  compile('org.springframework.boot:spring-boot-starter-security')
  compile('org.hibernate:hibernate-envers')
  compile('io.jsonwebtoken:jjwt:0.7.0')
  compile('org.liquibase:liquibase-core')
  compile('org.projectlombok:lombok:1.16.12')
  compile('io.springfox:springfox-swagger2:2.7.0')
  compile('io.springfox:springfox-swagger-ui:2.7.0')
  compile('org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE')

  runtime('com.h2database:h2:1.4.193')

  //runtime('org.postgresql:postgresql:42.1.1')

  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile("junit:junit")

  testRuntime('com.h2database:h2:1.4.193')
}

jar {
  baseName='mercury'
  version='0.0.1'
}

jacoco {
  toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
  reports {
    xml.enabled = false
    csv.enabled = false
    html.enabled = true
  }
}

test.finalizedBy jacocoTestReport
